<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-5931152">
    
    <title>Overview</title>
    <para>
      The SAVARA project aims to leverage the concept of a choreography (or conversation)
      
      description to provide design-time and run-time governance of an SOA.
    </para>
    <para>
      A Choreography provides the means to describe the service interactions between multiple parties from a global (or service neutral) perspective.
      
      This means that it is possible for an organisation to define how an end-to-end business process should function, regardless of whether orchestrated
      
      or peer-to-peer service collaboration will be used.
    </para>
    <para>
      Although in simple situations, a BPEL process description (or BPMN process model) can provide a description of the interactions between multiple services, this only works where a
      
      single orchestrating process is in control. The benefit of the choreography description is that it can be used to provide a global view of a process across multiple
      
      orchestrated service domains.
    </para>
    <para>
      This document will outline how the Choreography Description is being used as part of SAVARA to provide SOA governance capabilities
      
      for each phase of the SOA lifecycle.
    </para>
    <para>When a validated design has been approved by the users, it can be used to generate an initial skeleton of the design and/or implementation for each service.</para>
    <section id="sid-5931151">
      
      <title>Describing an Architecture using Choreography</title>
      <para>
        WS-CDL, or Web Service Choreography Description Language, is a candidate recommendation from W3C. Although associated with W3C and Web Services, it is important to begin by stating that the Choreography Description Language (CDL) is
        <emphasis role="italics">not</emphasis>
        web service specific.
      </para>
      <para>More recently the BPMN standard, under the guidance of the OMG, has introduced its own Choreography Model to complement the previous Process and Collaboration Models.</para>
      <para>The purpose of a Choreography is to enable the interactions between a collection of peer to peer services to be described from a neutral (or global) perspective. This is different to other standards, such as WS-BPEL, that describe interactions from a service specific viewpoint.</para>
      <para>In essence a Choreography description declares roles which will pass messages between each other, called interactions. The interactions are ordered based on a number of structuring mechanism which enables loops, choices and parallelism to be described. In WS-CDL and BPMN2 Choreography, variables used for messages and for conditionals are all situated at roles. There is no shared state rather there is a precise description of the state at each role and a precise description of how these roles interact in order to reach some notion of common state in which information is exchanged and processed between them.</para>
      <para>In Choreography we use interactions and these structuring mechanisms to describe the observable behaviour, the messages exchanges and the rules for those exchanges and any supporting observable state on which they depend, of a system.</para>
    </section>
    <section id="sid-5931155">
      
      <title>SOA Lifecycle Governance</title>
      <section id="sid-5931155_SOALifecycleGovernance-DesignTimeGovernance">
        
        <title>Design Time Governance</title>
        <para>
          Design-time governance is concerned with ensuring that the resulting system correctly implements requirements (whether functional or non-functional).
          
          A choreography description can be used to ensure that the implemented system meets the behavioural requirements.
        </para>
        <para>
          The behavioural requirements can be captured as a collection of scenarios (e.g. sequence diagrams) with associated example messages.
          
          This enables an unambiguous representation of the business requirements to be stored in a machine processable form, which can subsequently
          
          be used to validate other phases of the SOA lifecycle.
        </para>
        <para>
          Once the choreography description for the SOA has been defined, it can be validated against the scenarios,
          
          to ensure that the choreography correctly handles all of the business requirements.
        </para>
        <para>
          Once the service enters the implementation phase, it is important to ensure that it continues to adhere to the design
          
          and therefore meets the business requirements. Currently this is achieved through the use of techniques such as continuous testing.
          
          However this is only as reliable as the quality of the unit tests that have been written.
        </para>
        <para>
          When a 'structured' implementation language has been used, such as WS-BPEL,
          
          it will be possible to infer the behaviour of the service being implemented, to compare it against the choreography description.
        </para>
        <para>
          Detecting incorrectly implemented behaviour at the earliest possible time saves on downstream costs associated with finding and fixing errors.
          
          By using static validation against the original design, it ensures that the implemented service will deliver its expected behaviour first time.
          
          This is important in building large scale SOAs where different services may be implemented in different locations.
        </para>
        <para>
          There are two other areas where a choreography description can be used as part of design-time governance,
          
          that are not currently implemented in SAVARA:
        </para>
        <itemizedlist>
          <listitem>
            <para>Service lookup – the choreography description can be used to determine if a service already exists in the Service Repository that meets the appropriate behavioural requirements.</para>
          </listitem>
          <listitem>
            <para>
              Service unit testing - this can be achieved using the scenarios originally specified to document the behavioural requirements.
              
              Rather than develop an independent source of test data, the scenarios can be used to validate the sequence of messages sent to,
              
              and received from, a service, as well as validating the contents of the messages returned from the service under test.
            </para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="sid-5931155_SOALifecycleGovernance-RuntimeGovernance">
        
        <title>Runtime Governance</title>
        <para>Runtime governance ensures that the SOA executes as expected according to predefined policies. In this context, a choreography description can be used in two ways.</para>
        <section id="sid-5931155_SOALifecycleGovernance-Servicevalidator%28Futurefeature%29">
          
          <title>Service validator (Future feature)</title>
          <para>
            The choreography description represents the interactions between multiple services to deliver a business goal.
            
            To validate the behaviour of each individual service, within the choreography description, the behaviour of each service can be derived from the choreography.
          </para>
          <para>
            The derived behaviour (or “endpoint projection”) of a service can be used within a 'service validator' to monitor the inbound and outbound messages for the service,
            
            to ensure they conform to the expected behaviour.
            
            If an invalid message is detected, it would be possible to block it, to prevent it from causing subsequent problems in downstream systems.
            
            The error can also be reported to a central management capability.
          </para>
          <para>The SAVARA runtime governance infrastructure will provide the ability to configure service validators to monitor the behaviour of individual services.</para>
        </section>
        <section id="sid-5931155_SOALifecycleGovernance-Processcorrelation%28Futurefeature%29">
          
          <title>Process correlation (Future feature)</title>
          <para>Validating each service locally can enable errors to be detected quickly, and the effects of the error prevented from contaminating other systems by blocking the erroneous messages.</para>
          <para>
            However local service specific validation may not be adequate to identify errors that would affect the end-to-end business process.
            
            Therefore the message activity at each service validator can be reported to a central 'process correlation engine' which can reconstitute a global view of the business transaction,
            
            and determine if it matches the expected behaviour as defined in the choreography description.
          </para>
          <para>The benefit of a correlated global view of the distributed business transaction is that it can be further analysed to ensure other governance polices have been followed – e.g. SLAs.</para>
        </section>
      </section>
    </section>
    <section id="sid-5931156">
      
      <title>First Steps</title>
      <para>The first step will be to follow the instructions in the Getting Started Guide to install SAVARA.</para>
      <para>Once installed, the next step should be to try out the examples available on the Savara downloads page.</para>
    </section>
  </chapter>
