<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-5931161">
    
    <title>Conversation Validation with CDL</title>
    <section id="sid-5931160">
      
      <title>Overview</title>
      <para>Conversation validation is a form of runtime governance concerned with the dynamic behaviour of a system.</para>
      <para>When coupled with a choreography description model of a system, this means having the ability to ensure that the way a collection of services interact correctly adheres to a description of the business process being enacted.</para>
      <para>
        This section introduces the choreography description language (CDL) defined by W3C, and the
        <emphasis role="italics">pi4soa</emphasis>
        open source project which provides an editor for creating choreography descriptions, as well as utilizing these descriptions for runtime validation and execution purposes.
      </para>
    </section>
    <section id="sid-5931162">
      
      <title>Configuration of Conversation Validation</title>
      <para>
        This section explains how to configure the conversation validation mechanism to validate services
        
        against a choreography description. The first sub-section describes how the mechanism is hooked into the
        
        JBossESB and JBossWS-Native environments. The following two sub-sections explain two alternate ways that relevant endpoint
        
        references can be configured for validation.
      </para>
      <section id="sid-5931162_ConfigurationofConversationValidation-InstallingtheConversationValidationMechanism">
        
        <title>Installing the Conversation Validation Mechanism</title>
        <section id="sid-5931162_ConfigurationofConversationValidation-JBossWSNative">
          
          <title>JBossWS-Native</title>
          <para>
            The principle mechanism used for validating conversations within the JBossWS Native stack
            
            is through the use of a global filter registered in the
            
            <code>standard-jaxws-client-config.xml</code>
            and
            
            <code>standard-jaxws-endpoint-config.xml</code>
            files.
            
            These files are located in the
            <emphasis role="italics">$JBossAS/server/default/deployers/jbossws.deployer/META-INF</emphasis>
            
            folder.
          </para>
          <para>
            The
            <code>standard-jaxws-client-config.xml</code>
            is updated to include a
            
            pre handler implemented by a Savara client interceptor.
          </para>
          <informalexample>
            <programlisting>&lt;client-config&gt;
    &lt;config-name&gt;Standard Client&lt;/config-name&gt;
    &lt;pre-handler-chains&gt;
      &lt;javaee:handler-chain&gt;
        &lt;javaee:protocol-bindings&gt;##SOAP11_HTTP&lt;/javaee:protocol-bindings&gt;
        &lt;javaee:handler&gt;
          &lt;javaee:handler-name&gt;SAVARA JBossWS-Native Client Interceptor&lt;/javaee:handler-name&gt;
          &lt;javaee:handler-class&gt;org.savara.integration.jbosswsnative.JBossWSNativeClientInterceptor&lt;/javaee:handler-class&gt;
        &lt;/javaee:handler&gt;
      &lt;/javaee:handler-chain&gt;
    &lt;/pre-handler-chains&gt;
    &lt;feature&gt;http://org.jboss.ws/dispatch/validate&lt;/feature&gt;
    &lt;property&gt;
      &lt;property-name&gt;http://org.jboss.ws/http#chunksize&lt;/property-name&gt;
      &lt;property-value&gt;2048&lt;/property-value&gt;
    &lt;/property&gt;
  &lt;/client-config&gt;</programlisting>
          </informalexample>
          <para>
            The
            <code>standard-jaxws-endpoint-config.xml</code>
            is updated to include a
            
            pre handler implemented by a Savara server interceptor.
          </para>
          <informalexample>
            <programlisting>&lt;endpoint-config&gt;
    &lt;config-name&gt;Standard Endpoint&lt;/config-name&gt;
    &lt;pre-handler-chains&gt;
      &lt;javaee:handler-chain&gt;
        &lt;javaee:protocol-bindings&gt;##SOAP11_HTTP&lt;/javaee:protocol-bindings&gt;
        &lt;javaee:handler&gt;
          &lt;javaee:handler-name&gt;Recording Handler&lt;/javaee:handler-name&gt;
          &lt;javaee:handler-class&gt;org.jboss.wsf.framework.invocation.RecordingServerHandler&lt;/javaee:handler-class&gt;
        &lt;/javaee:handler&gt;
      &lt;/javaee:handler-chain&gt;
      &lt;javaee:handler-chain&gt;
        &lt;javaee:protocol-bindings&gt;##SOAP11_HTTP&lt;/javaee:protocol-bindings&gt;
        &lt;javaee:handler&gt;
          &lt;javaee:handler-name&gt;SAVARA JBossWS-Native Service Interceptor&lt;/javaee:handler-name&gt;
          &lt;javaee:handler-class&gt;org.savara.integration.jbosswsnative.JBossWSNativeServerInterceptor&lt;/javaee:handler-class&gt;
        &lt;/javaee:handler&gt;
      &lt;/javaee:handler-chain&gt;
    &lt;/pre-handler-chains&gt;
  &lt;/endpoint-config&gt;</programlisting>
          </informalexample>
          <para>
            These interceptors are installed as part of the installation process for the SAVARA
            
            distribution.
          </para>
        </section>
        <section id="sid-5931162_ConfigurationofConversationValidation-JBossESB">
          
          <title>JBossESB</title>
          <para>
            The principle mechanism used for validating conversations within an ESB is through the use
            
            of a global filter registered with the
            <emphasis role="italics">jbossesb-properties.xml</emphasis>
            .
            
            This file is located in the
            <emphasis role="italics">$JBossAS/server/default/deployers/esb.deployer</emphasis>
            
            folder.
          </para>
          <informalexample>
            <programlisting>&lt;properties name="filters"&gt;
			...
			&lt;property name="org.jboss.soa.esb.filter.10"
					value="org.savara.integration.jbossesb.JBossESBInterceptor"/&gt;
		&lt;/properties&gt;</programlisting>
          </informalexample>
          <para>This filter is installed as part of the installation process for the SAVARA distribution.</para>
        </section>
      </section>
      <section id="sid-5931162_ConfigurationofConversationValidation-ExplicitConfiguration">
        
        <title>Explicit Configuration</title>
        <para>
          The information concerning which destinations will be validated, and to which model/role
          
          they relate, can be explicitly defined within the
          <emphasis role="italics">validator-config.xml</emphasis>
          
          file, contained within the
          <emphasis role="italics">savara-jbossesb.esb</emphasis>
          bundle.
        </para>
        <para>An example of the contents of this file, that would related to the TrailBlazer example, is:</para>
        <informalexample>
          <programlisting>&lt;validator mode="monitor" replyToTimeout="10000" &gt;
		&lt;service model="TrailBlazer.cdm"
					role="LoanBrokerParticipant" &gt;
			&lt;output epr="jms:queue/esb-tb-creditAgencyQueue" /&gt;
			&lt;input epr="jms:queue/esb-tb-creditAgencyQueue_reply" /&gt;
			&lt;output epr="jms:queue/esb-tb-jmsBankRequestQueue" /&gt;
			&lt;output epr="jms:queue/esb-tb-fileBankRequestQueue" /&gt;
			&lt;input epr="jms:queue/esb-tb-jmsBankResponseQueue" /&gt;
			&lt;output epr="jms:queue/esb-tb-customerNotifier" /&gt;
			&lt;input epr="jms:queue/esb-tb-fileBankResponseQueue" /&gt;
		&lt;/service&gt;
		&lt;service model="TrailBlazer.cdm"
					role="CreditAgencyParticipant" &gt;
			&lt;input epr="jms:queue/esb-tb-creditAgencyQueue" /&gt;
			&lt;output epr="jms:queue/esb-tb-creditAgencyQueue_reply" /&gt;
		&lt;/service&gt;
		&lt;service model="TrailBlazer.cdm"
					role="BankParticipant" &gt;
			&lt;input epr="jms:queue/esb-tb-jmsBankRequestQueue" /&gt;
			&lt;input epr="jms:queue/esb-tb-fileBankRequestQueue" /&gt;
			&lt;output epr="jms:queue/esb-tb-jmsBankResponseQueue" /&gt;
			&lt;output epr="jms:queue/esb-tb-fileBankResponseQueue" /&gt;
		&lt;/service&gt;
		&lt;service model="TrailBlazer.cdm"
					role="NotifierParticipant" &gt;
			&lt;input epr="jms:queue/esb-tb-customerNotifier" /&gt;
		&lt;/service&gt;
	&lt;/validator&gt;</programlisting>
        </informalexample>
        <para>
          The 'validator' element has an optional attribute called 'mode', with the possible values
          
          of 'monitor' or 'manage'. If the mode is 'monitor' (which is the default), then any messages
          
          that result in validation errors being detected will continue to be received or sent, with
          
          the errors only be reported for information purposes. If the mode is 'manage', then any
          
          erronous messages detected during validation, that conflict with the behaviour as described
          
          in the choreography, will be prevented from being received or sent.
        </para>
        <note>
          <para>
            It is important to note that if 'manage' validation mode is used, then the validation
            
            mechanism will be an integral part of the message flow. This may have a slight performance
            
            impact on the delivery of messages between services.
          </para>
        </note>
        <para>
          The optional 'replyToTimeout' (defined in milliseconds) is used to determine how long a dynamic
          
          reply-to destination should be monitored for validation purposes. In some message exchanges,
          
          the response destination will not always be known in advance. Therefore the configuration can
          
          identify such situations, and monitor the reply-to destination for the response. However, if a
          
          response is not delivered in a particular time period, we need to be able to discontinue the
          
          validation of the dynamic endpoint. If this did not occur, then over time too many endpoints
          
          would be monitored, which may result in out-of-memory problems. The default timeout period is
          
          10 seconds.
        </para>
        <para>
          Within the 'validator' element is a list of 'service' elements, one per service being validated.
          
          The behaviour of the service being validated is identified by specifying the model (e.g.
          
          choreography description file) and the role (e.g. participant type) within the model. Therefore,
          
          within the above configuration, the first set of destinations (eprs) are associated with the
          
          <emphasis role="italics">LoanBrokerParticipant</emphasis>
          defined within the choreography description model
          
          found in the file
          <code>TrailBlazer.cdm</code>
          , which will be located within the
          
          <code>models</code>
          folder contained within the
          
          <emphasis role="italics">savara-jboss.sar</emphasis>
          bundle.
        </para>
        <para>
          The elements contained within the 'service' element define the
          <emphasis role="italics">input</emphasis>
          and
          
          <emphasis role="italics">output</emphasis>
          eprs (Endpoint References) that are associated with the service.
          
          The
          <emphasis role="italics">input</emphasis>
          eprs are the destinations on which messages will be received and
          
          the
          <emphasis role="italics">output</emphasis>
          eprs are the destinations on which messages will be sent by the
          
          service.
        </para>
        <para>
          The format of the 'epr' attribute will be specific to the type of transport being validated.
          
          Currently JMS is supported, and can be identified by the protocol prefix 'jms:', or a
          
          Web Service endpoint using a service name with the QName style of '{namespace}localpart'.
        </para>
        <para>
          Each 'input' and 'output' element can also define an optional 'dynamicReplyTo' boolean attribute.
          
          If defined, it will indicate to the Service Validator that the message on the specified endpoint
          
          (epr) will contain a dynamically defined 'reply-to' destination that needs to be monitored for
          
          a response.
        </para>
      </section>
      <section id="sid-5931162_ConfigurationofConversationValidation-DefiningtheValidatorConfigurationwithinaChoreography">
        
        <title>Defining the Validator Configuration within a Choreography</title>
        <para>
          The first step to configuring the validator is to associate the endpoint references (EPRs)
          
          against the relevant choreography interactions. This is achieved by defining an
          
          annotation for each 'exchange details' component (i.e. each request and response/notification).
        </para>
        <para>
          <figure>
<title>TODO InformalFigure image title empty</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="author/download/attachments/5931162/editvalidatorann.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          
          When the annotation editor is displayed for the relevant 'exchange details' component,
          
          the
          <emphasis role="italics">validator</emphasis>
          annotation should be added. This is achieved by
          
          selecting the popup menu associated with the background of the lefthand panel,
          
          and selecting the
          <emphasis role="italics">Add Defined Annotation</emphasis>
          menu item.
        </para>
        <para>
          <figure>
<title>TODO InformalFigure image title empty</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="author/download/attachments/5931162/editvalidatoranndiag.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          
          When the list of defined annotations is displayed, select the
          
          <emphasis role="italics">validator</emphasis>
          annotation.
        </para>
        <para>
          <figure>
<title>TODO InformalFigure image title empty</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="author/download/attachments/5931162/editvalidatorannselect.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          
          After pressing the
          <emphasis role="italics">Ok</emphasis>
          button, the annotation editor
          
          will configure the righthand panel with the parameters associated with this
          
          annotation.
        </para>
        <para>
          <figure>
<title>TODO InformalFigure image title empty</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="author/download/attachments/5931162/validatorannotation.png"/>
              </imageobject>
            </mediaobject>
          </figure>
          
          To specify the Endpoint Reference (EPR) for a particular message exchange, enter the EPR into the
          
          <emphasis role="italics">Destination</emphasis>
          field. The value specified in this field will
          
          be dependent upon the technology being validated. For example, if the JBossESB
          
          is being monitored, then the value will be a physical address associated with the
          
          ESB service endpoint (e.g. jms:queue/esb-quotes). If the technology being validated is a Web
          
          Service (or BPEL process), then the field will represent the WSDL service name
          
          specified using the QName style (e.g. {namespace}localpart).
        </para>
        <para>
          The
          <emphasis role="italics">Type</emphasis>
          field is used to define the style of endpoint being
          
          validated. In the image above, the endpoint being validated is a Web Service (or
          
          BPEL process), and therefore the type is specified as a 'service name'. However if
          
          the technology being validated identifies a different endpoint address, for the request
          
          and response (as in the case of JBossESB), then the type should be set to
          
          'endpoint address'.
        </para>
        <para>
          If the exchange is a request, that
          
          will result in a response being sent on a dynamically provided "reply-to"
          
          destination, then the
          <emphasis role="italics">Dynamic Reply-To</emphasis>
          checkbox should be selected.
          
          This situation may occur in the case of validating a JBossESB service, where a
          
          well-defined endpoint address has not been defined for the response.
        </para>
        <para>
          Once the annotation has been defined, then press the
          <emphasis role="italics">Save</emphasis>
          
          button to save the annotation against the interaction's exchange details.
        </para>
        <para>
          When all of the relevant 'exchange details' components have been configured with
          
          a
          <emphasis role="italics">validator</emphasis>
          annotation, defining the EPR to be validated,
          
          then the choreography description file can be copied into the
          
          <code>savara-jboss.sar/models</code>
          folder. This will cause
          
          the validation mechanism to derive the configuration information from the choreography
          
          description model, and begin validating the defined destinations against that
          
          choreography description model.
        </para>
      </section>
    </section>
    <section id="sid-5931163">
      
      <title>Monitoring the Choreography Description</title>
      <para>
        Once the server environment has been configured, to perform service validation of a set of
        
        services against a choreography description, and the server has been started, then the next
        
        step is to configure the monitoring tool. This can be achieved by opening the
        
        <emphasis role="italics">Window-&gt;Preferences-&gt;Savara-&gt;Monitor</emphasis>
        dialog, as shown in the following
        
        image.
      </para>
      <para>
        <figure>
<title>TODO InformalFigure image title empty</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="author/download/attachments/5931163/monitorprefs.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        
        In general, the default values specified for the JNDI and JMS properties will be fine.
        
        The only information that should need to be provided is a path to the JMS and JNDI
        
        libraries. When using the JBossAS server, this path can be set to the top level
        
        <code>client</code>
        folder.
      </para>
      <para>
        The next step is to launch the monitoring tool. This is located on the popup menu, for
        
        the choreography description (i.e. .cdm) file, by selecting the Savara-&gt;Monitor menu
        
        item. Once the tool has been launched, it will load the choreography description, subscribe
        
        to the relevant event destination, and then indicate via a message in the bottom status line
        
        that it is ready to monitor.
      </para>
      <para>
        <figure>
<title>TODO InformalFigure image title empty</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="author/download/attachments/5931163/monitorui.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        
        When the information is received, from the service validators representing the different
        
        participants (services), it is correlated to show the global status of the business
        
        transaction. The list of correlated interactions is shown in reverse time order in the
        
        image.
      </para>
      <para>
        If any
        <emphasis role="italics">out of sequence</emphasis>
        or other error situations arise, these are
        
        displayed in red.
      </para>
    </section>
    <section id="sid-5931164">
      
      <title>Configuration for Conversation Recording</title>
      <para>
        As well as validating the interactions between a set of
        
        services, against a pre-defined choreography description,
        
        it is also possible to use the
        <emphasis role="italics">Service Validators</emphasis>
        
        in a non-validating record mode.
      </para>
      <para>
        This will be useful in situations where a choreography
        
        description does not currently exist, and we wish to
        
        use the stream of business events being sent and received
        
        by each identified service (or participant type) to
        
        gain an understanding of the current business process.
      </para>
      <para>
        An example of this type of configuration, associated
        
        with the TrailBlazer example, is:
      </para>
      <informalexample>
        <programlisting>&lt;validator&gt;
		&lt;service role="LoanBrokerParticipant" validate="false" &gt;
			&lt;output epr="jms:queue/esb-tb-creditAgencyQueue" /&gt;
			&lt;input epr="jms:queue/esb-tb-creditAgencyQueue_reply" /&gt;
			&lt;output epr="jms:queue/esb-tb-jmsBankRequestQueue" /&gt;
			&lt;output epr="jms:queue/esb-tb-fileBankRequestQueue" /&gt;
			&lt;input epr="jms:queue/esb-tb-jmsBankResponseQueue" /&gt;
			&lt;output epr="jms:queue/esb-tb-customerNotifier" /&gt;
			&lt;input epr="jms:queue/esb-tb-fileBankResponseQueue" /&gt;
		&lt;/service&gt;
		&lt;service role="CreditAgencyParticipant" validate="false" &gt;
			&lt;input epr="jms:queue/esb-tb-creditAgencyQueue" /&gt;
			&lt;output epr="jms:queue/esb-tb-creditAgencyQueue_reply" /&gt;
		&lt;/service&gt;
		&lt;service role="BankParticipant" validate="false" &gt;
			&lt;input epr="jms:queue/esb-tb-jmsBankRequestQueue" /&gt;
			&lt;input epr="jms:queue/esb-tb-fileBankRequestQueue" /&gt;
			&lt;output epr="jms:queue/esb-tb-jmsBankResponseQueue" /&gt;
			&lt;output epr="jms:queue/esb-tb-fileBankResponseQueue" /&gt;
		&lt;/service&gt;
		&lt;service role="NotifierParticipant" validate="false" &gt;
			&lt;input epr="jms:queue/esb-tb-customerNotifier" /&gt;
		&lt;/service&gt;
	&lt;/validator&gt;</programlisting>
      </informalexample>
      <para>
        To define a
        <emphasis role="italics">Service Validator</emphasis>
        in record
        
        only mode, the
        <emphasis role="italics">model</emphasis>
        attribute
        
        is not specified (because no choreography description exists
        
        to be validated against), and the optional
        <emphasis role="italics">validate</emphasis>
        
        attribute should be set to
        <emphasis role="italics">false</emphasis>
        (by default
        
        this attribute is
        <emphasis role="italics">true</emphasis>
        ).
      </para>
    </section>
  </chapter>
